/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer

/ {
    keymap {
        compatible = "zmk,keymap";
        default_layer {
// ------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKS |
// | ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  | RET |
// | nop |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | KOR |
//                   | SYS | SYM | SPC |   | SPC | NUM | nop |
            display-name = "Base";
            bindings = <
    &kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T     &kp Y     &kp U     &kp I     &kp O     &kp P     &kp BSPC
    &kp ESC   &kp A     &kp S     &kp D     &kp F     &kp G     &kp H     &kp J     &kp K     &kp L     &kp SEMI  &kp RET
    &none     &kp Z     &kp X     &kp C     &kp V     &kp B     &kp N     &kp M     &kp COMMA &kp DOT   &kp FSLH  &kp LANG1 
                                  &mo 3     &mo 1     &kp SPACE &kp SPACE MO_TOG 2  &none 
            >;
        };
           
        symbol_layer {
// ------------------------------------------------------------------------------
// |  `  | nop |  _  |  =  |  +  | nop |   | nop |  !  |  @  |  #  | nop |  \  |
// |  ~  | nop |  [  |  (  |  {  |  "  |   | nop |  $  |  %  |  ^  | nop |  |  |
// | nop | nop |  ]  |  )  |  }  |  '  |   | nop |  &  |  *  |  -  | nop | nop |
//                   | nop |     | SPC |   | SPC | nop | nop |
            display-name = "Symbols";
            bindings = <
    &kp TILDE &none     &kp UNDER &kp EQUAL &kp PLUS  &none     &none     &kp EXCL  &kp AT    &kp HASH  &none     &kp BSLH
    &kp GRAVE &none     &kp LBKT  &kp LPAR  &kp LBRC  &kp DQT   &none     &kp DLLR  &kp PRCNT &kp CARET &none     &kp PIPE 
    &none     &none     &kp RBKT  &kp RPAR  &kp RBRC  &kp SQT   &none     &kp AMPS  &kp STAR  &kp MINUS &none     &none    
                                  &none     &trans    &trans    &trans    &none     &none
            >;
        };

        nums_layer {
// ------------------------------------------------------------------------------
// | nop |  F1 |  F2 |  F3 |  F4 | nop |   | nop |  1  |  2  |  3  | nop | nop |
// | nop |  F5 |  F6 |  F7 |  F8 | nop |   |  0  |  4  |  5  |  6  | nop | nop |
// | nop |  F9 | F10 | F11 | F12 | nop |   | nop |  7  |  8  |  9  | nop | nop |
//                   | nop | nop | nop |   | SPC |     | nop |
            display-name = "Numbers";
            bindings = <
    &none     &kp F1    &kp F2    &kp F3    &kp F4    &none     &none     &kp N1    &kp N2    &kp N3    &none     &none
    &none     &kp F5    &kp F6    &kp F7    &kp F8    &none     &kp N0    &kp N4    &kp N5    &kp N6    &none     &none
    &none     &kp F9    &kp F10   &kp F11   &kp F12   &none     &none     &kp N7    &kp N8    &kp N9    &none     &none 
                                  &none     &none     &trans    &trans    &trans    &none
            >;
        };

        system_layer {
// ------------------------------------------------------------------------------
// | nop | nop | PRV | PLY | NXT | nop |   | nop | PUP |  UP | PDN | PSC | nop |
// | nop | nop | VL- | MUT | VL+ | nop |   | HOM | LFT | DWN | RGT | nop | nop |
// | nop | nop | BTP | BTC | BTN | nop |   | END | nop | nop | nop | nop | nop |
//                   |     | nop | nop |   | nop | nop |     |
            display-name = "System";
            bindings = <
    &none     &none     &kp C_PREV   &kp C_PP   &kp C_NEXT   &none     &none     &kp PG_UP &kp UP   &kp PG_DN &kp PSCRN &none   
    &none     &none     &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &none     &kp HOME  &kp LEFT  &kp DOWN &kp RIGHT &none     &none    
    &none     &none     &bt BT_PRV   &bt BT_CLR &bt BT_NXT   &none     &kp END   &none     &none    &none     &none     &none 
                                     &trans     &none        &none     &none     &none     &trans
            >;
        };

        extra_2 {
            status = "reserved";
        };

        extra_3 {
            status = "reserved";
        };
    };

// Key Positions
// ------------------------------------------------------------------------------
// |  0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  10 |  11 |
// |  12 |  13 |  14 |  15 |  16 |  17 |   |  18 |  19 |  20 |  21 |  22 |  23 |
// |  24 |  25 |  26 |  27 |  28 |  29 |   |  30 |  31 |  32 |  33 |  34 |  35 |
//                   |  36 |  37 |  38 |   |  39 |  40 |  41 |
    combos {
        compatible = "zmk,combos";

        // Left side mods
        combo_lshift {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LSHFT>;
        };

        combo_lctrl {
            timeout-ms = <50>;
            key-positions = <14 16>;
            bindings = <&kp LCTRL>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp LALT>;
        };

        combo_lmeta {
            timeout-ms = <50>;
            key-positions = <13 17>;
            bindings = <&kp LMETA>;
        };

        combo_lctrlshift {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LC(LSHFT)>;
        };

        combo_laltshift {
            timeout-ms = <50>;
            key-positions = <13 15>;
            bindings = <&kp LA(LSHFT)>;
        };

        combo_lctrlalt {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LC(LALT)>;
        };


        // Right side mods
        combo_rshift {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp LSHFT>;
        };

        combo_rctrl {
            timeout-ms = <50>;
            key-positions = <19 21>;
            bindings = <&kp LCTRL>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <19 22>;
            bindings = <&kp LALT>;
        };

        combo_rmeta {
            timeout-ms = <50>;
            key-positions = <18 22>;
            bindings = <&kp LMETA>;
        };

        combo_rctrlshift {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp LC(LSHFT)>;
        };

        combo_raltshift {
            timeout-ms = <50>;
            key-positions = <20 22>;
            bindings = <&kp LA(LSHFT)>;
        };

        combo_rctrlalt {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LC(LALT)>;
        };

        // Misc combos
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <15 16 19 20>;
            bindings = <&caps_word>;
        };
    };

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            bindings = <&mo>, <&tog>;
        };
    };
};
